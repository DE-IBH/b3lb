# Generated by Django 3.2 on 2021-04-09 21:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('rest', '0003_update_node_default_help'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='rest.tenant')),
                ('slide', models.FileField(blank=True, null=True, upload_to='rest.AssetSlide/blob/filename/mimetype')),
                ('slide_filename', models.CharField(blank=True, max_length=250, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='rest.AssetLogo/blob/filename/mimetype')),
            ],
            options={
                'ordering': ['tenant__slug'],
            },
        ),
        migrations.CreateModel(
            name='AssetLogo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blob', models.BinaryField()),
                ('filename', models.CharField(max_length=255)),
                ('mimetype', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='AssetSlide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blob', models.BinaryField()),
                ('filename', models.CharField(max_length=255)),
                ('mimetype', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('BLOCK', 'BLOCK'), ('SET', 'SET'), ('OVERRIDE', 'OVERRIDE')], max_length=10)),
                ('parameter', models.CharField(choices=[('maxParticipants', 'maxParticipants - Maximum number of users allowed to joined the conference at the same time.'), ('logoutURL', 'logoutURL - The URL that the BigBlueButton client will go to after users click the OK button on the ‘You have been logged out message’.'), ('duration', 'duration - The maximum length (in minutes) for the meeting.'), ('webcamsOnlyForModerator', "webcamsOnlyForModerator - Setting to 'true' will cause all webcams shared by viewers during this meeting to only appear for moderators."), ('bannerText', 'bannerText - Will set the banner text in the client.'), ('bannerColor', "bannerColor - Will set the banner background color in the client. Format is color hex '#FFFFFF'."), ('copyright', 'copyright - Setting will replace the default copyright on the footer of the Flash client.'), ('muteOnStart', "muteOnStart - Setting to 'true' will mute all users when the meeting starts."), ('allowModsToUnmuteUsers', "allowModsToUnmuteUsers - Setting to 'true' will allow moderators to unmute other users in the meeting."), ('lockSettingsDisableCam', "lockSettingsDisableCam - Setting to 'true' will prevent users from sharing their camera in the meeting."), ('lockSettingsDisableMic', "lockSettingsDisableMic - Setting to 'true' will only allow user to join listen only."), ('lockSettingsDisablePrivateChat', "lockSettingsDisablePrivateChat - Setting to 'true' will disable private chats in the meeting."), ('lockSettingsDisablePublicChat', "lockSettingsDisablePublicChat - Setting to 'true' will disable public chat in the meeting."), ('lockSettingsDisableNote', "lockSettingsDisableNote - Setting to 'true' will disable notes in the meeting."), ('lockSettingsLockedLayout', "lockSettingsLockedLayout - Setting to 'true' will lock the layout in the meeting."), ('lockSettingsHideUserList', "lockSettingsHideUserList - Setting to 'true' will lock the user list in the meeting."), ('lockSettingsLockOnJoin', "lockSettingsLockOnJoin - Setting to 'false' will not apply lock setting to users when they join."), ('lockSettingsLockOnJoinConfigurable', "lockSettingsLockOnJoinConfigurable - Setting to 'true' will allow applying of lockSettingsLockOnJoin param."), ('guestPolicy', 'guestPolicy - Will set the guest policy for the meeting. Possible values are ALWAYS_ACCEPT, ALWAYS_DENY, and ASK_MODERATOR.'), ('meetingKeepEvents', "meetingKeepEvents - If set to 'true' BigBlueButton saves meeting events even if the meeting is not recorded.")], max_length=64)),
                ('value', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='tenant',
            name='slide',
        ),
        migrations.AlterField(
            model_name='metric',
            name='name',
            field=models.CharField(choices=[('attendees', 'Total number of current attendees'), ('listeners', 'Total number of current listeners'), ('voices', 'Total number of current voice participants'), ('videos', 'Total number of current video participants'), ('meetings', 'Total number of running meetings'), ('attendees_total', 'Number of attendees that have joined'), ('meetings_total', 'Number of meetings that have been created'), ('meeting_duration_seconds_count', 'Total number of meeting durations'), ('meeting_duration_seconds_sum', 'Sum of meeting durations'), ('attendee_limit_hits', 'Number of attendee limit hits'), ('meeting_limit_hits', 'Number of meeting limit hits')], max_length=64),
        ),
        migrations.AlterField(
            model_name='metric',
            name='node',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rest.node'),
        ),
        migrations.DeleteModel(
            name='Slide',
        ),
        migrations.AddField(
            model_name='parameter',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest.tenant'),
        ),
        migrations.AddConstraint(
            model_name='parameter',
            constraint=models.UniqueConstraint(fields=('parameter', 'tenant'), name='unique_parameter'),
        ),
    ]
