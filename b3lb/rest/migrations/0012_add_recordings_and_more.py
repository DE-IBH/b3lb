# Generated by Django 3.2.16 on 2023-01-17 16:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import rest.models
import uuid

def create_default_record_profile(apps, schema_editor):
    record_profile = apps.get_model("rest", "RecordProfile")
    profile = record_profile()
    profile.uuid = uuid.UUID("f2de8725-ea94-4594-b1f0-454bc3b22294")
    profile.description = "Presentation Only"
    profile.name = "presentation"
    profile.backend_profile = "default.yml"
    profile.command = "--webcam-size=0 --annotations"
    profile.mime_type = "video/mp4"
    profile.file_extension = "mp4"
    profile.is_default = True
    profile.save()


class Migration(migrations.Migration):

    dependencies = [
        ('rest', '0011_alter_asset_logo'),
    ]

    operations = [
        migrations.CreateModel(
            name='RecordProfile',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('backend_profile', models.CharField(default='default.yml', max_length=32)),
                ('command', models.CharField(blank=True, max_length=255, null=True)),
                ('mime_type', models.CharField(default='video/mp4', max_length=32)),
                ('file_extension', models.CharField(default='mp4', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
            ],
        ),
        migrations.RunPython(create_default_record_profile),
        migrations.AddField(
            model_name='clustergroup',
            name='sha_function',
            field=models.CharField(choices=[('sha1', 'sha1'), ('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], default='sha256', max_length=6),
        ),
        migrations.AddField(
            model_name='meeting',
            name='end_callback_url',
            field=models.URLField(default=''),
        ),
        migrations.AddField(
            model_name='meeting',
            name='nonce',
            field=models.CharField(default=rest.models.get_nonce, editable=False, max_length=64, unique=True),
        ),
        migrations.AddField(
            model_name='secret',
            name='recording_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='secret',
            name='records_hold_time',
            field=models.IntegerField(default=14, help_text='Days interval before deleting records.', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='tenant',
            name='recording_enabled',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='tenant',
            name='records_hold_time',
            field=models.IntegerField(default=14, help_text='Days interval before deleting records.', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='assetslide',
            name='mimetype',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='parameter',
            name='parameter',
            field=models.CharField(choices=[('allowModsToUnmuteUsers', 'allowModsToUnmuteUsers'), ('allowStartStopRecording', 'allowStartStopRecording'), ('autoStartRecording', 'autoStartRecording'), ('bannerColor', 'bannerColor'), ('bannerText', 'bannerText'), ('copyright', 'copyright'), ('disabledFeatures', 'disabledFeatures'), ('duration', 'duration'), ('endWhenNoModerator', 'endWhenNoModerator'), ('endWhenNoModeratorDelayInMinutes', 'endWhenNoModeratorDelayInMinutes'), ('groups', 'groups'), ('guestPolicy', 'guestPolicy'), ('lockSettingsDisableCam', 'lockSettingsDisableCam'), ('lockSettingsDisableMic', 'lockSettingsDisableMic'), ('lockSettingsDisablePrivateChat', 'lockSettingsDisablePrivateChat'), ('lockSettingsDisablePublicChat', 'lockSettingsDisablePublicChat'), ('lockSettingsDisableNote', 'lockSettingsDisableNote'), ('lockSettingsHideViewersCursor', 'lockSettingsHideViewersCursor'), ('lockSettingsLockOnJoin', 'lockSettingsLockOnJoin'), ('lockSettingsLockOnJoinConfigurable', 'lockSettingsLockOnJoinConfigurable'), ('lockSettingsLockedLayout', 'lockSettingsLockedLayout'), ('logo', 'logo'), ('logoutURL', 'logoutURL'), ('maxParticipants', 'maxParticipants'), ('meta_fullaudio-bridge', 'meta_fullaudio-bridge'), ('meetingCameraCap', 'meetingCameraCap'), ('meetingExpireIfNoUserJoinedInMinutes', 'meetingExpireIfNoUserJoinedInMinutes'), ('meetingExpireWhenLastUserLeftInMinutes', 'meetingExpireWhenLastUserLeftInMinutes'), ('meetingKeepEvents', 'meetingKeepEvents'), ('moderatorOnlyMessage', 'moderatorOnlyMessage'), ('muteOnStart', 'muteOnStart'), ('notifyRecordingIsOn', 'notifyRecordingIsOn'), ('presentationUploadExternalDescription', 'presentationUploadExternalDescription'), ('presentationUploadExternalUrl', 'presentationUploadExternalUrl'), ('record', 'record'), ('webcamsOnlyForModerator', 'webcamsOnlyForModerator'), ('welcome', 'welcome'), ('meetingLayout', 'meetingLayout'), ('preUploadedPresentationOverrideDefault', 'preUploadedPresentationOverrideDefault'), ('learningDashboardCleanupDelayInMinutes', 'learningDashboardCleanupDelayInMinutes'), ('role', 'role'), ('excludeFromDashboard', 'excludeFromDashboard'), ('userdata-bbb_ask_for_feedback_on_logout', 'userdata-bbb_ask_for_feedback_on_logout'), ('userdata-bbb_auto_join_audio', 'userdata-bbb_auto_join_audio'), ('userdata-bbb_client_title', 'userdata-bbb_client_title'), ('userdata-bbb_force_listen_only', 'userdata-bbb_force_listen_only'), ('userdata-bbb_listen_only_mode', 'userdata-bbb_listen_only_mode'), ('userdata-bbb_skip_check_audio', 'userdata-bbb_skip_check_audio'), ('userdata-bbb_skip_check_audio_on_first_join', 'userdata-bbb_skip_check_audio_on_first_join'), ('userdata-bbb_override_default_locale', 'userdata-bbb_override_default_locale'), ('userdata-bbb_display_branding_area', 'userdata-bbb_display_branding_area'), ('userdata-bbb_shortcuts', 'userdata-bbb_shortcuts'), ('userdata-bbb_auto_share_webcam', 'userdata-bbb_auto_share_webcam'), ('userdata-bbb_preferred_camera_profile', 'userdata-bbb_preferred_camera_profile'), ('userdata-bbb_enable_screen_sharing', 'userdata-bbb_enable_screen_sharing'), ('userdata-bbb_enable_video', 'userdata-bbb_enable_video'), ('userdata-bbb_record_video', 'userdata-bbb_record_video'), ('userdata-bbb_skip_video_preview', 'userdata-bbb_skip_video_preview'), ('userdata-bbb_skip_video_preview_on_first_join', 'userdata-bbb_skip_video_preview_on_first_join'), ('userdata-bbb_mirror_own_webcam', 'userdata-bbb_mirror_own_webcam'), ('userdata-bbb_force_restore_presentation_on_new_events', 'userdata-bbb_force_restore_presentation_on_new_events'), ('userdata-bbb_multi_user_pen_only', 'userdata-bbb_multi_user_pen_only'), ('userdata-bbb_presenter_tools', 'userdata-bbb_presenter_tools'), ('userdata-bbb_multi_user_tools', 'userdata-bbb_multi_user_tools'), ('userdata-bbb_custom_style', 'userdata-bbb_custom_style'), ('userdata-bbb_custom_style_url', 'userdata-bbb_custom_style_url'), ('userdata-bbb_auto_swap_layout', 'userdata-bbb_auto_swap_layout'), ('userdata-bbb_hide_presentation', 'userdata-bbb_hide_presentation'), ('userdata-bbb_show_participants_on_login', 'userdata-bbb_show_participants_on_login'), ('userdata-bbb_show_public_chat_on_login', 'userdata-bbb_show_public_chat_on_login'), ('userdata-bbb_outside_toggle_self_voice', 'userdata-bbb_outside_toggle_self_voice'), ('userdata-bbb_outside_toggle_recording', 'userdata-bbb_outside_toggle_recording')], max_length=64),
        ),
        migrations.CreateModel(
            name='SecretRecordProfileRelation',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('record_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest.recordprofile')),
                ('secret', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest.secret')),
            ],
        ),
        migrations.CreateModel(
            name='RecordSet',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('recording_archive', models.FileField(storage=rest.models.get_storage, upload_to='')),
                ('recording_ready_origin_url', models.URLField(default='')),
                ('nonce', models.CharField(default=rest.models.get_nonce, editable=False, max_length=64, unique=True)),
                ('status', models.CharField(choices=[('UNKNOWN', 'Recording state is unknown or meeting is running'), ('UPLOADED', 'Recording file has been uploaded'), ('RENDERED', 'Recordings have been rendered to video files'), ('DELETING', 'Recordings will be deleted')], default='UNKNOWN', max_length=10)),
                ('file_path', models.CharField(max_length=50)),
                ('meta_bbb_origin', models.CharField(default='', max_length=20)),
                ('meta_bbb_origin_version', models.CharField(default='', max_length=20)),
                ('meta_bbb_origin_server_name', models.CharField(default='', max_length=50)),
                ('meta_is_breakout', models.BooleanField(default=False)),
                ('meta_end_callback_url', models.URLField(default='')),
                ('meta_meeting_id', models.CharField(default='', max_length=100)),
                ('meta_meeting_name', models.CharField(default='', max_length=500)),
                ('meta_start_time', models.CharField(default='', max_length=14)),
                ('meta_end_time', models.CharField(default='', max_length=14)),
                ('meta_participants', models.SmallIntegerField(default=0)),
                ('meeting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rest.meeting')),
                ('secret', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest.secret')),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('file', models.FileField(storage=rest.models.get_storage, upload_to='')),
                ('name', models.CharField(max_length=758)),
                ('gl_listed', models.BooleanField(default=False)),
                ('published', models.BooleanField(default=False)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('nonce', models.CharField(default=rest.models.get_nonce, editable=False, max_length=64, unique=True)),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='rest.recordprofile')),
                ('record_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest.recordset')),
            ],
        ),
    ]
